
import numpy as np
import pandas as pd
import geopandas as gpd
from scipy.stats import gaussian_kde
import matplotlib.pyplot as plt
from shapely.geometry import Point

# Load dataset (assuming a CSV file with columns 'latitude', 'longitude', and 'volume')
data = pd.read_csv('C:/Users/Alfonso/Desktop/aaa.csv')

# Convert to GeoDataFrame
gdf = gpd.GeoDataFrame(data, geometry=gpd.points_from_xy(data.coord_x, data.coord_y))

# Extract coordinates and volume
coords = np.vstack([gdf.geometry.x, gdf.geometry.y])
volumes = gdf['volume_m3']

# Define function to calculate KDE
def calculate_kde(coords, values, bandwidth=0.1, gridsize=10000):
    kde = gaussian_kde(coords, weights=values, bw_method=bandwidth)
    x_min, y_min = coords.min(axis=1)
    x_max, y_max = coords.max(axis=1)
    x_grid, y_grid = np.mgrid[x_min:x_max:gridsize*1j, y_min:y_max:gridsize*1j]
    grid_coords = np.vstack([x_grid.ravel(), y_grid.ravel()])
    kde_values = kde(grid_coords).reshape(x_grid.shape)
    return x_grid, y_grid, kde_values

# Calculate point density KDE
x_grid, y_grid, point_density = calculate_kde(coords, np.ones(len(coords[0])))

# Calculate volume density KDE
_, _, volume_density = calculate_kde(coords, volumes)

# Plotting
fig, axes = plt.subplots(1, 2, figsize=(18, 8))

# Point Density Map
ax = axes[0]
pcm = ax.pcolormesh(x_grid, y_grid, point_density, shading='auto', cmap='viridis')
fig.colorbar(pcm, ax=ax, label='Point Density')
ax.set_title('Point Density Map')
ax.set_xlabel('coord_x')
ax.set_ylabel('coord_y')

# Volume Density Map
ax = axes[1]
pcm = ax.pcolormesh(x_grid, y_grid, volume_density, shading='auto', cmap='viridis')
fig.colorbar(pcm, ax=ax, label='Volume Density')
ax.set_title('Volume Density Map')
ax.set_xlabel('coord_x')
ax.set_ylabel('coord_y')

plt.tight_layout()
plt.show()



-----------------

SHP TO GEOJSON

import geopandas
import os

# Path to the shapefile
shapefile_path = 'C:/Users/Alfonso/Desktop/bbb.shp'

# Load the shapefile
aaa = geopandas.read_file(shapefile_path)

# Path to save the GeoJSON on the desktop
desktop_path = os.path.join(os.path.expanduser("~"), "Desktop", "myJson.geojson")

# Export to GeoJSON
aaa.to_file(desktop_path, driver='GeoJSON')
